name: "Build Ark Linux Release"

on:
    workflow_call:
      inputs:
        version:
          required: false
          description: "The Ark version"
          default: ${{ github.sha }}
          type: string
    workflow_dispatch:

jobs:
    build_linux:
        name: Build Linux
        runs-on: ubuntu-latest
        timeout-minutes: 60

        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DEBUG_FLAG: ${{ matrix.flavor == 'debug' && '-debug' || '' }}
            TARGET_FLAG: ${{ matrix.flavor == 'release' && '--release' || '' }}
            ARCH_FLAG: ${{ matrix.arch == 'x64' && 'x86_64' || 'aarch64' }}
            GLIBC_MAX_VERSION: '2.26'  # Sufficiently old for all our target platforms

        strategy:
            matrix:
                arch: [x64, arm64]
                flavor: [debug, release]

        steps:
            - name: Checkout sources
              uses: actions/checkout@v4

            - name: Setup Build Environment
              run: |
                  sudo apt-get update
                  sudo apt-get install -y cargo

                  # We're linking with zig to select the libc version
                  cargo install --locked cargo-zigbuild
                  sudo apt install python3-pip
                  pip3 install ziglang

            - name: Setup Build Environment for arm64
              if: matrix.arch == 'arm64'
              run: |
                  rustup target add aarch64-unknown-linux-gnu

            - name: Compile ARK (${{ matrix.flavor }})
              run: |
                  cargo clean

                  # Use the zig linker. This allows linking to a specific version of glibc.
                  # We use a sufficiently old version that is available on all platforms we target.
                  # See https://github.com/ziglang/glibc-abi-tool
                  cargo zigbuild --target ${ARCH_FLAG}-unknown-linux-gnu.$GLIBC_MAX_VERSION $TARGET_FLAG

            # Compress kernel to a zip file
            - name: Create archive
              run: |
                  # Enter the build directory
                  pushd target/${ARCH_FLAG}-unknown-linux-gnu/${{ matrix.flavor }}

                  # Compress the kernel to an archive
                  ARCHIVE="$GITHUB_WORKSPACE/ark-${{ inputs.version }}${{ env.DEBUG_FLAG }}-linux-${{ matrix.arch }}.zip"
                  [ -e LICENSE ] || cp "$GITHUB_WORKSPACE/LICENSE" LICENSE
                  [ -e NOTICE ] || cp "$GITHUB_WORKSPACE/crates/ark/NOTICE" NOTICE
                  zip -Xry $ARCHIVE ark LICENSE NOTICE

                  popd

            - name: Upload archive
              uses: actions/upload-artifact@v4
              with:
                  name: ark-${{ matrix.flavor }}-linux-${{ matrix.arch }}-archive
                  path: ark-${{ inputs.version }}${{ env.DEBUG_FLAG }}-linux-${{ matrix.arch }}.zip

name: "Build Ark Windows Release"
on:
    push:
        branches:
            - main
    workflow_dispatch:

jobs:
    # Extract the current version of ARK from its Cargo.toml file.
    get_version:
        name: Determine ARK Version
        runs-on: ubuntu-latest
        outputs:
            ARK_VERSION: ${{ steps.extract_version.outputs.result }}
        steps:
            # Checkout sources
            - name: Checkout sources
              uses: actions/checkout@v4

            # Extract version
            - name: Determine Version
              id: extract_version
              run: |
                  VERSION=$(cat crates/ark/Cargo.toml | grep '^version' | sed -e "s/[^.0-9]//g")
                  echo "ARK version: ${VERSION}"
                  echo "result=${VERSION}" >> $GITHUB_OUTPUT

    build_windows:
        name: Build Windows
        runs-on: windows-latest
        timeout-minutes: 40
        needs: [get_version]

        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        strategy:
            matrix:
                arch: [x64]
                flavor: [debug, release]
                include:
                    - arch: x64
                      rust_target_prefix: x86_64

        steps:
            - name: Checkout sources
              uses: actions/checkout@v4

            - name: Setup R
              uses: r-lib/actions/setup-r@v2
              with:
                  r-version: '4.3.2'

            - name: Find R installation
              id: r_installation
              shell: bash
              run: |
                  R_HOME="C:\R"
                  R_SCRIPT="${R_HOME}\bin\x64\Rscript.exe"
                  echo "Using R at ${R_HOME}"
                  echo "Using Rscript at ${R_SCRIPT}"
                  # Output the result for consumption in later steps
                  echo "r_home=${R_HOME}" >> $GITHUB_OUTPUT
                  echo "r_script=${R_SCRIPT}" >> $GITHUB_OUTPUT

            - name: Generate LIB from DLL
              shell: cmd
              run: |
                  ${{ steps.r_installation.outputs.r_script }} "scripts\windows\dll2lib.R"

            - name: Compile ARK
              env:
                  ARK_BUILD_TYPE: ${{ matrix.flavor }}
                  RUST_TARGET: ${{ matrix.rust_target_prefix }}-pc-windows-msvc
                  R_HOME: ${{ steps.r_installation.outputs.r_home }}
              shell: cmd
              run: |
                  cargo clean
                  cargo build ${{ matrix.flavor == 'release' && '--release' || '' }} --target ${{ matrix.rust_target_prefix }}-pc-windows-msvc

            - name: Create archive
              shell: pwsh
              run: |
                  # Compress the kernel to an archive
                  Compress-Archive -Path "target\${{ matrix.rust_target_prefix }}-pc-windows-msvc\${{ matrix.flavor }}\ark.exe" -DestinationPath "ark-${{ needs.get_version.outputs.ARK_VERSION }}-${{ matrix.flavor }}-windows-${{ matrix.arch }}.zip"

            - name: Upload client archive
              uses: actions/upload-artifact@v3
              with:
                  name: ark-${{ matrix.flavor }}-windows-${{ matrix.arch }}-archive
                  path: ark-${{ needs.get_version.outputs.ARK_VERSION }}-${{ matrix.flavor }}-windows-${{ matrix.arch }}.zip
